// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kondrushin/blog/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// IBlogUseCase is an autogenerated mock type for the IBlogUseCase type
type IBlogUseCase struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ctx, p
func (_m *IBlogUseCase) CreatePost(ctx context.Context, p *domain.Post) (int64, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Post) (int64, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Post) int64); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Post) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *IBlogUseCase) DeletePost(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPost provides a mock function with given fields: ctx, id
func (_m *IBlogUseCase) GetPost(ctx context.Context, id int64) (*domain.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 *domain.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPosts provides a mock function with given fields: ctx
func (_m *IBlogUseCase) GetPosts(ctx context.Context) []*domain.Post {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 []*domain.Post
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Post); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Post)
		}
	}

	return r0
}

// UpdatePost provides a mock function with given fields: ctx, post, id
func (_m *IBlogUseCase) UpdatePost(ctx context.Context, post *domain.Post, id int64) error {
	ret := _m.Called(ctx, post, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Post, int64) error); ok {
		r0 = rf(ctx, post, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIBlogUseCase creates a new instance of IBlogUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBlogUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBlogUseCase {
	mock := &IBlogUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
